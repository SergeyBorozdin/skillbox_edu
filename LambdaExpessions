import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Main {

    public static String STAFF_TXT = "data/staff.txt";
    public static String DateFormat = "dd.MM.yyyy";

    public static void main(String[] args) {
        List<Employee> staff = loadStaffFromFile(STAFF_TXT);
        Collections.sort(staff, (Comparator.comparing(Employee::getSalary)));

        System.out.println("old");
        staff.forEach(System.out::println);

        int salaryIncrease = 10000;
        System.out.println("new");
        staff.forEach(e -> e.setSalary(e.getSalary() + salaryIncrease));
        staff.forEach(System.out::println);
        
        // получение стрима и работа с фильтром
        staff.stream().filter(employee -> employee.getSalary() >= 100_000).forEach(System.out::println);
        
        //получить стрим интеджеров
        Stream<Integer> integerStream = Stream.of(1,2,3,4,5,6,7,8,9,10);
        integerStream.filter(n -> n % 2 == 0).forEach(System.out::println);
        
        //плучение стрима из массива
        Integer[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        Arrays.stream(numbers).filter(e -> e % 2 == 0).forEach(System.out::println);
        
        //сортировка стримом
        staff.stream().sorted(Comparator.comparing(Employee::getSalary))
                .forEach(System.out::println);
                
                
        //поиск максимального и печать если он есть
        staff.stream().max(Comparator.comparing(Employee::getSalary))
                .ifPresent(System.out::println);
                
        // через map получаем, фильтруем, суммируем
        staff.stream()
                .map(e -> e.getSalary())
                .filter(s -> s >= 100_000)
                .reduce((s1, s2) -> s1 + s2)
                .ifPresent(System.out::println);

    }

        public static List<Employee> loadStaffFromFile(String path) {
        List<Employee> staff = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(Paths.get(path));
            for (String line : lines) {
                String[] fragments = line.split("\t");
                if (fragments.length != 3) {
                    System.out.println("Wrong line: " + line);
                    continue;
                }
                String dateFormat = "dd.MM.yyyy";
                staff.add(new Employee(
                        fragments[0],
                        Integer.parseInt(fragments[1]),
                        (new SimpleDateFormat(dateFormat)).parse(fragments[2])
                ));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return staff;
    }

    public static void sortBySalaryAndAlphabet(List<Employee> staff) {
        //TODO Метод должен отсортировать сотрудников по заработной плате и алфавиту.
        staff.sort(Comparator.comparing(Employee::getSalary).thenComparing(Employee::getName));
        for (Employee employee : staff ) {
            System.out.println(employee);
        }
    }
}

==================================

import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

public class Employee {
    private String name;
    private Integer salary;
    private Date workStart;

    public Employee(String name, Integer salary, Date workStart) {
        this.name = name;
        this.salary = salary;
        this.workStart = workStart;
    }

//    public static List<Employee> loadStaffFromFile(String path) {
//        List<Employee> staff = new ArrayList<>();
//        try {
//            List<String> lines = Files.readAllLines(Paths.get(path));
//            for (String line : lines) {
//                String[] fragments = line.split("\t");
//                if (fragments.length != 3) {
//                    System.out.println("Wrong line: " + line);
//                    continue;
//                }
//                String dateFormat = "dd.MM.yyyy";
//                staff.add(new Employee(
//                        fragments[0],
//                        Integer.parseInt(fragments[1]),
//                        (new SimpleDateFormat(dateFormat)).parse(fragments[2])
//                ));
//            }
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//        return staff;
//    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getSalary() {
        return salary;
    }

    public void setSalary(int salary) {
        this.salary = salary;
    }

    public Date getWorkStart() {
        return workStart;
    }

    public void setWorkStart(Date workStart) {
        this.workStart = workStart;
    }

    public String toString() {
        return name + " - " + salary + " - " +
                (new SimpleDateFormat("dd.MM.yyyy")).format(workStart);
    }

//    @Override
//    public boolean equals(Object o) {
//        if (this == o) {
//            return true;
//        }
//        if (o == null || getClass() != o.getClass()) {
//            return false;
//        }
//        Employee employee = (Employee) o;
//        return Objects.equals(name, employee.name) &&
//                Objects.equals(salary, employee.salary) &&
//                Objects.equals(workStart, employee.workStart);
//    }
//
//    @Override
//    public int hashCode() {
//        return Objects.hash(name, salary, workStart);
//    }
}

==================================
staff.txt

Дмитриев Василий	78000	12.07.2016
Алексей Ивлиев	125000	11.11.2018
Анна Сетяева	140000	10.05.2012
Дмитрий Кочергин	140000	31.01.2017
Михаил Быковский	78000	10.02.2018
Артём Фигурнов	78000	22.04.2018
Марина Евстафьева	95000	17.03.2017
Павел Смородинов	88000	19.09.2018
Жанна Ковалёва	78000	20.02.2018
Степан Богданов	140000	17.04.2016
Виктор Рязанов	95000	20.03.2017
Савелий Фёдоров	115000	07.05.2019
Андрей Леонов	88000	16.12.2017
Татьяна Рыхальская	95000	10.10.2018
Анастасия Бернадо	78000	05.06.2015
Евгений Алфёров	105000	12.08.2016





// задание для проверки
// напишите код, который должен выделить сотрудников, пришедших в выбранном году, и среди них выявить сотрудника с максимальным значением заработной платы.
public class Main {

    private static final String STAFF_TXT = "data/staff.txt";

    public static void main(String[] args) {
        List<Employee> staff = Employee.loadStaffFromFile(STAFF_TXT);
        Employee employeeMaxSalary = findEmployeeWithHighestSalary(staff, 2017);
        System.out.println(employeeMaxSalary);
    }

    public static Employee findEmployeeWithHighestSalary(List<Employee> staff, int year) {
        //TODO Метод должен вернуть сотрудника с максимальной зарплатой среди тех,
        // кто пришёл в году, указанном в переменной year
        Employee employee = null;
        LocalDate year2017 = LocalDate.of(year, 1, 1);
        Optional<Employee> optional = staff.stream()
                .filter(e -> e.getWorkStart().after(localDateToDate(year2017))
                        && e.getWorkStart().before(localDateToDate(year2017.plusYears(1))))
                .max(Comparator.comparing(Employee::getSalary));
        if (optional.isPresent()) {
            employee = optional.get();
        }
        return employee;
    }

    public static LocalDate dateToLocalDate(Date d) {
        Instant instant = d.toInstant();
        LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
        return localDateTime.toLocalDate();
    }

    public static Date localDateToDate(LocalDate localDate) {
        Instant instant = localDate.atStartOfDay().atZone( ZoneId.systemDefault()).toInstant();
        return Date.from(instant);
    }
}

//еще один вариант решения 
public static Employee findEmployeeWithHighestSalary(List<Employee> staff, int year) {
       return staff.stream()
           .filter((e) -> {
               Calendar calendar = Calendar.getInstance();
               calendar.setTime(e.getWorkStart());
               return calendar.get(Calendar.YEAR) == year;
           })
           .max((e1, e2) ->
               e1.getSalary().compareTo(e2.getSalary()))
           .get();
   }
